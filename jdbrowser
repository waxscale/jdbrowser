#!/home/jaguar/.pyenv/versions/jdbrowser/bin/python

import sys
import os
import configparser
from PySide6 import QtCore, QtGui, QtWidgets

# Highlight colors
HIGHLIGHT_COLOR = '#44475a'
HOVER_COLOR = '#5c6370'

class FileItem(QtWidgets.QWidget):
    def __init__(self, name, parent_path):
        super().__init__()
        self.name = name
        self.isSelected = False
        self.isHover = False
        self.setAttribute(QtCore.Qt.WidgetAttribute.WA_Hover)

        # Fix vertical size policy
        self.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)

        layout = QtWidgets.QVBoxLayout(self)
        layout.setSpacing(2)
        layout.setContentsMargins(2, 2, 2, 2)

        # Icon: Check if item is a folder and contains [00].png
        icon_path = os.path.join(parent_path, name, '[00].png')
        if os.path.isdir(os.path.join(parent_path, name)) and os.path.isfile(icon_path):
            self.icon = QtWidgets.QLabel()
            pixmap = QtGui.QPixmap(icon_path)
            if not pixmap.isNull():
                scaled_pixmap = pixmap.scaled(240, 150, QtCore.Qt.AspectRatioMode.KeepAspectRatio, QtCore.Qt.TransformationMode.SmoothTransformation)
                self.icon.setPixmap(scaled_pixmap)
                self.icon.setFixedSize(240, 150)
                self.icon.setStyleSheet('border-radius: 10px;')
            else:
                # Fallback to slate box if image is invalid
                self.icon = QtWidgets.QFrame()
                self.icon.setFixedSize(240, 150)
                self.icon.setStyleSheet('background-color: #2e303e; border-radius: 10px;')
        else:
            # Default slate box
            self.icon = QtWidgets.QFrame()
            self.icon.setFixedSize(240, 150)
            self.icon.setStyleSheet('background-color: #2e303e; border-radius: 10px;')
        layout.addWidget(self.icon, alignment=QtCore.Qt.AlignmentFlag.AlignHCenter)

        # Label (single line)
        self.label = QtWidgets.QLabel(name)
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.label.setFixedWidth(240)
        self.label.setWordWrap(False)
        self.label.setStyleSheet('color: #c0caf5;')
        layout.addWidget(self.label, alignment=QtCore.Qt.AlignmentFlag.AlignHCenter)

        # Fixed height: icon + single line label + spacings and margins
        fm = self.label.fontMetrics()
        label_height = fm.height()
        spacing = layout.spacing()
        margins = layout.contentsMargins()
        total_height = 150 + label_height + spacing + margins.top() + margins.bottom()
        self.setFixedHeight(total_height)

        self.updateStyle()

    def updateStyle(self):
        # Use a single background highlight
        if self.isHover:
            bg = HOVER_COLOR
        elif self.isSelected:
            bg = HIGHLIGHT_COLOR
        else:
            bg = 'transparent'
        self.setStyleSheet(f'background-color: {bg}; border-radius: 10px;')

    def enterEvent(self, event):
        self.isHover = True
        self.updateStyle()
        self.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        super().enterEvent(event)

    def leaveEvent(self, event):
        self.isHover = False
        self.updateStyle()
        self.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        super().leaveEvent(event)

class FileBrowser(QtWidgets.QMainWindow):
    def __init__(self, directory):
        super().__init__()
        self.directory = directory
        self.setWindowTitle(f"File Browser - {self.directory}")
        self.cols = 5
        self.sections = []
        self.sec_idx = 0
        self.idx_in_sec = 0
        self.desired_col = 0

        # Disable window decorations
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)

        self._setup_ui()
        self._setup_shortcuts()
        self.updateSelection()

        # Restore saved position and size
        settings = QtCore.QSettings("xAI", "jdbrowser")
        if settings.contains("pos") and settings.contains("size"):
            self.move(settings.value("pos", type=QtCore.QPoint))
            self.resize(settings.value("size", type=QtCore.QSize))

    def _setup_ui(self):
        self.scroll = QtWidgets.QScrollArea()
        self.scroll.setWidgetResizable(True)
        container = QtWidgets.QWidget()
        mainLayout = QtWidgets.QVBoxLayout(container)
        mainLayout.setSpacing(10)
        mainLayout.setContentsMargins(5, 5, 5, 5)

        self.sections = []
        current_section = []
        grid = QtWidgets.QGridLayout()
        grid.setSpacing(5)
        row = col = 0

        entries = sorted(os.listdir(self.directory), key=lambda x: x.lower())
        for name in entries:
            if name.lower().endswith('.2do'):
                # flush current section
                if current_section:
                    self.sections.append(current_section)
                    sectionWidget = QtWidgets.QWidget()
                    sectionWidget.setLayout(grid)
                    sectionWidget.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
                    mainLayout.addWidget(sectionWidget)
                    mainLayout.setAlignment(sectionWidget, QtCore.Qt.AlignmentFlag.AlignLeft)
                # header
                header_text = os.path.splitext(name)[0]
                header = QtWidgets.QLabel(header_text)
                header.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeft | QtCore.Qt.AlignmentFlag.AlignVCenter)
                font = header.font()
                font.setPointSize(int(font.pointSize() * 1.5))
                font.setBold(True)
                header.setFont(font)
                header.setStyleSheet('background-color: #d7ba7d; color: black; padding-left:5px; padding-right:5px;')
                fm = header.fontMetrics()
                header.setFixedHeight(fm.height() + 6)
                mainLayout.addWidget(header)
                # reset for new section
                current_section = []
                grid = QtWidgets.QGridLayout()
                grid.setSpacing(5)
                row = col = 0
                continue
            # normal item
            item = FileItem(name, self.directory)
            current_section.append(item)
            grid.addWidget(item, row, col)
            col += 1
            if col >= self.cols:
                col = 0
                row += 1
        # flush last section
        if current_section:
            self.sections.append(current_section)
            sectionWidget = QtWidgets.QWidget()
            sectionWidget.setLayout(grid)
            sectionWidget.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
            mainLayout.addWidget(sectionWidget)
            mainLayout.setAlignment(sectionWidget, QtCore.Qt.AlignmentFlag.AlignLeft)

        container.setStyleSheet('background-color: #000000;')
        self.scroll.setWidget(container)
        self.setCentralWidget(self.scroll)

        style = '''
        * { font-family: 'FiraCode Nerd Font'; }
        QWidget { background-color: #000000; }
        QMainWindow { background-color: #000000; }
        QScrollArea { border: none; background-color: #000000; }
        QScrollBar:vertical {
            width: 8px;
            background: #000000;
        }
        QScrollBar::handle:vertical {
            background: #44475a;
            min-height: 20px;
            border-radius: 4px;
        }
        QScrollBar::add-line, QScrollBar::sub-line { height: 0; }
        QScrollBar::add-page, QScrollBar::sub-page { background: none; }
        '''
        self.setStyleSheet(style)

    def _setup_shortcuts(self):
        self.setFocusPolicy(QtCore.Qt.FocusPolicy.StrongFocus)
        # navigation keys
        mappings = [
            (QtCore.Qt.Key_Right, self.moveHoriz, 1),
            (QtCore.Qt.Key_L, self.moveHoriz, 1),
            (QtCore.Qt.Key_Left, self.moveHoriz, -1),
            (QtCore.Qt.Key_H, self.moveHoriz, -1),
            (QtCore.Qt.Key_Down, self.moveVert, 1),
            (QtCore.Qt.Key_J, self.moveVert, 1),
            (QtCore.Qt.Key_Up, self.moveVert, -1),
            (QtCore.Qt.Key_K, self.moveVert, -1),
            (QtCore.Qt.Key_BracketLeft, self.moveToSectionStart, None),
            (QtCore.Qt.Key_BracketRight, self.moveToSectionEnd, None),
            (QtCore.Qt.Key_G, self.moveToAbsoluteFirst, None),
            (QtCore.Qt.Key_G, self.moveToAbsoluteLast, None, QtCore.Qt.KeyboardModifier.ShiftModifier),
            (QtCore.Qt.Key_U, self.moveVertMultiple, -3, QtCore.Qt.KeyboardModifier.ControlModifier),
            (QtCore.Qt.Key_D, self.moveVertMultiple, 3, QtCore.Qt.KeyboardModifier.ControlModifier),
            (QtCore.Qt.Key_PageUp, self.moveVertMultiple, -3),
            (QtCore.Qt.Key_PageDown, self.moveVertMultiple, 3),
            (QtCore.Qt.Key_Z, self.centerSelectedItem, None),
            (QtCore.Qt.Key_Y, self.copySelectedName, None),
        ]
        for mapping in mappings:
            key, func, arg = mapping[0], mapping[1], mapping[2]
            modifiers = mapping[3] if len(mapping) > 3 else QtCore.Qt.KeyboardModifier.NoModifier
            s = QtGui.QShortcut(QtGui.QKeySequence(key | modifiers), self)
            if arg is None:
                s.activated.connect(func)
            else:
                s.activated.connect(lambda f=func, a=arg: f(a))
        # row home/end
        zero = QtGui.QShortcut(QtGui.QKeySequence('0'), self)
        zero.activated.connect(self.firstInRow)
        dollar = QtGui.QShortcut(QtGui.QKeySequence('$'), self)
        dollar.activated.connect(self.lastInRow)
        # quit keys
        for seq in ['Q', 'Ctrl+Q', 'Ctrl+W', 'Esc', 'Alt+F4']:
            s = QtGui.QShortcut(QtGui.QKeySequence(seq), self)
            s.activated.connect(self.close)

    def moveHoriz(self, delta):
        sec = self.sections[self.sec_idx]
        new = self.idx_in_sec + delta
        if 0 <= new < len(sec):
            self.idx_in_sec = new
            # update preferred column
            self.desired_col = self.idx_in_sec % self.cols
        self.updateSelection()

    def moveVert(self, direction):
        pref_col = self.desired_col
        sec_index = self.sec_idx
        idx = self.idx_in_sec
        cols = self.cols
        # within section
        sec = self.sections[sec_index]
        row = idx // cols
        rows = (len(sec) + cols - 1) // cols
        if direction > 0:
            if row + 1 < rows:
                r2 = row + 1
                length = min(cols, len(sec) - r2 * cols)
                self.idx_in_sec = r2 * cols + min(pref_col, length - 1)
            elif sec_index + 1 < len(self.sections):
                sec2 = self.sections[sec_index + 1]
                length = min(cols, len(sec2))
                self.sec_idx += 1
                self.idx_in_sec = min(pref_col, length - 1)
        else:
            if row > 0:
                r2 = row - 1
                length = min(cols, len(sec) - r2 * cols)
                self.idx_in_sec = r2 * cols + min(pref_col, length - 1)
            elif sec_index > 0:
                sec2 = self.sections[sec_index - 1]
                rows2 = (len(sec2) + cols - 1) // cols
                last = rows2 - 1
                length = min(cols, len(sec2) - last * cols)
                self.sec_idx -= 1
                self.idx_in_sec = last * cols + min(pref_col, length - 1)
        self.updateSelection()

    def moveToSectionStart(self):
        if self.idx_in_sec == 0 and self.sec_idx > 0:
            self.sec_idx -= 1
            self.idx_in_sec = 0
        else:
            self.idx_in_sec = 0
        self.desired_col = 0
        self.updateSelection()

    def moveToSectionEnd(self):
        sec = self.sections[self.sec_idx]
        last_idx = len(sec) - 1
        if self.idx_in_sec == last_idx and self.sec_idx < len(self.sections) - 1:
            self.sec_idx += 1
            sec = self.sections[self.sec_idx]
            self.idx_in_sec = len(sec) - 1
        else:
            self.idx_in_sec = last_idx
        self.desired_col = self.idx_in_sec % self.cols
        self.updateSelection()

    def moveToAbsoluteFirst(self):
        self.sec_idx = 0
        self.idx_in_sec = 0
        self.desired_col = 0
        self.updateSelection()

    def moveToAbsoluteLast(self):
        self.sec_idx = len(self.sections) - 1
        sec = self.sections[self.sec_idx]
        self.idx_in_sec = len(sec) - 1
        self.desired_col = self.idx_in_sec % self.cols
        self.updateSelection()

    def moveVertMultiple(self, count):
        for _ in range(abs(count)):
            self.moveVert(1 if count > 0 else -1)

    def centerSelectedItem(self):
        current = self.sections[self.sec_idx][self.idx_in_sec]
        self.scroll.ensureWidgetVisible(current)
        # Calculate position to center the widget vertically
        viewport = self.scroll.viewport()
        viewport_height = viewport.height()
        widget_rect = current.rect()
        widget_pos = current.mapTo(self.scroll.widget(), widget_rect.topLeft())
        scroll_bar = self.scroll.verticalScrollBar()
        target_pos = widget_pos.y() - (viewport_height - widget_rect.height()) // 2
        scroll_bar.setValue(max(0, target_pos))
        self.updateSelection()

    def copySelectedName(self):
        current = self.sections[self.sec_idx][self.idx_in_sec]
        clipboard = QtWidgets.QApplication.clipboard()
        clipboard.setText(current.name)

    def firstInRow(self):
        row = self.idx_in_sec // self.cols
        self.idx_in_sec = row * self.cols
        self.desired_col = 0
        self.updateSelection()

    def lastInRow(self):
        sec = self.sections[self.sec_idx]
        row = self.idx_in_sec // self.cols
        length = min(self.cols, len(sec) - row * self.cols)
        self.idx_in_sec = row * self.cols + length - 1
        self.desired_col = length - 1
        self.updateSelection()

    def updateSelection(self):
        # scroll to ensure visible
        current = self.sections[self.sec_idx][self.idx_in_sec]
        self.scroll.ensureWidgetVisible(current)
        # update flags
        for s, sec in enumerate(self.sections):
            for i, item in enumerate(sec):
                item.isSelected = False
        if not current.isHover:
            current.isSelected = True
        for sec in self.sections:
            for item in sec:
                item.updateStyle()

    def closeEvent(self, event):
        # Save window position and size before closing
        settings = QtCore.QSettings("xAI", "jdbrowser")
        settings.setValue("pos", self.pos())
        settings.setValue("size", self.size())
        super().closeEvent(event)

    def keyPressEvent(self, event):
        super().keyPressEvent(event)

def read_config():
    config = configparser.ConfigParser()
    cfg_path = os.path.expanduser('~/.config/jdbrowser/config.conf')
    config.read(cfg_path)
    return config.get('settings','repository',fallback=os.getcwd())

if __name__ == '__main__':
    if len(sys.argv) > 1:
        directory = sys.argv[1]
    else:
        directory = read_config()
    directory = os.path.expanduser(directory)
    if not os.path.isdir(directory):
        print('Error:', directory, 'is not a valid directory.')
        sys.exit(1)

    app = QtWidgets.QApplication(sys.argv)
    app.setFont(QtGui.QFont('FiraCode Nerd Font'))
    browser = FileBrowser(directory)
    # Only set default size and position if no saved settings exist
    settings = QtCore.QSettings("xAI", "jdbrowser")
    if not (settings.contains("pos") and settings.contains("size")):
        browser.resize(1000, 600)
        # Center the window on the screen as a fallback
        screen = app.primaryScreen().geometry()
        browser.move((screen.width() - 1000) // 2, (screen.height() - 600) // 2)
    browser.show()
    sys.exit(app.exec())
